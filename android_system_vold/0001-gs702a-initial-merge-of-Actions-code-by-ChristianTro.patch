From c636ecea54ea9cbb04d6a56de3189f6535dce2e9 Mon Sep 17 00:00:00 2001
From: Alan Marchesan <justcavalli@gmail.com>
Date: Thu, 3 Oct 2013 06:46:20 +0200
Subject: [PATCH] gs702a: initial merge of Actions code by ChristianTroy

---
 VolumeManager.cpp | 109 ++++++++++++++++++++++++++++++++++++++++++++++++++++++
 VolumeManager.h   |  11 ++++++
 main.cpp          |  16 ++++++++
 3 files changed, 136 insertions(+)

diff --git a/VolumeManager.cpp b/VolumeManager.cpp
index a944543..bb8aae7 100644
--- a/VolumeManager.cpp
+++ b/VolumeManager.cpp
@@ -50,6 +50,12 @@
 #include "Asec.h"
 #include "cryptfs.h"
 
+#define SYS_VID_PATH  "/sys/bus/usb/drivers/usb/%s/idVendor"
+#define SYS_PID_PATH  "/sys/bus/usb/drivers/usb/%s/idProduct"
+#define CDROM_MAJOR  11  
+#define SG_MAJOR  21  
+#define SD_MAJOR  8 
+
 VolumeManager *VolumeManager::sInstance = NULL;
 
 VolumeManager *VolumeManager::Instance() {
@@ -133,12 +139,115 @@ int VolumeManager::addVolume(Volume *v) {
     return 0;
 }
 
+int VolumeManager::addFilterDevice(int vid, int pid) {
+    if (mFilterCount < MAX_U3G_NUM - 1) {
+        mFilterVidPid[mFilterCount] = (vid << 16) | pid;
+        mFilterCount ++;
+    }
+    return 0;
+}
+
+bool VolumeManager::isFilterDevice(int vid, int pid) {    
+        const int *base = mFilterVidPid;
+    const int key = (vid << 16) | pid;
+        int lim, cmp;
+        const int *p;
+
+    /* binary search */
+        for (lim = mFilterCount; lim != 0; lim >>= 1) {
+                p = base + (lim >> 1);
+                cmp = key - *p;
+                if (cmp > 0) {  /* key > p: move right */
+                        base = p + 1;
+                        lim--;
+                } else if (cmp == 0) {
+                    SLOGI("Filter device found.");
+                        return true;
+                } /* else move left */
+        }
+    SLOGI("Filter device not found.");
+        return false;
+}
+
 void VolumeManager::handleBlockEvent(NetlinkEvent *evt) {
     const char *devpath = evt->findParam("DEVPATH");
+    int major = atoi(evt->findParam("MAJOR")); 
+    int minor = atoi(evt->findParam("MINOR"));
+    int action = evt->getAction();
 
     /* Lookup a volume to handle this device */
     VolumeCollection::iterator it;
     bool hit = false;
+
+    if (major == SD_MAJOR) {
+        if(action == NetlinkEvent::NlActionAdd) {
+            char default_vid[8];
+            char default_pid[8];
+            char bus_port[8];
+            char path[255];
+            int fd,length;
+            char *startp;
+            char *endp;
+
+            memset(bus_port, 0, sizeof(bus_port)); 
+            memset(default_vid, 0, sizeof(default_vid)); 
+            memset(default_pid, 0, sizeof(default_pid)); 
+            memset(path, 0, sizeof(path));  
+
+            endp = strchr(devpath,':');
+            (*endp) = '\0';
+            startp = strrchr(devpath,'/') + 1;
+            (*endp) = ':';
+            memcpy(bus_port, startp, (endp - startp));
+            
+            snprintf(path, 254, SYS_VID_PATH, bus_port);
+            fd = open(path, O_RDONLY);
+            if (fd < 0) {
+                SLOGE("usb modeswitch open  %s error",path);
+            } else {
+                length = read(fd, default_vid, sizeof(default_vid));
+                default_vid[length-1] = 0;
+                close(fd);
+            }
+            memset(path, 0, sizeof(path));  
+            snprintf(path, 254, SYS_PID_PATH, bus_port);
+            fd = open(path, O_RDONLY);
+            if (fd < 0) {
+                SLOGE("usb modeswitch open  %s error",path);
+            } else {
+                length = read(fd, default_pid, sizeof(default_pid));
+                default_pid[length-1] = 0;
+                close(fd);
+            }            
+            
+            if ((default_vid[0] == '\0') || (default_pid[0] == '\0')) {
+                SLOGI("open vid_pid failed, ignore filter");                    
+                mFilterKdev = -1;
+            } else {
+                int vid, pid;
+                sscanf(default_vid, "%x", &vid);
+                sscanf(default_pid, "%x", &pid);
+                if (isFilterDevice(vid, pid)) {
+                    SLOGI("3g dongle sdx block event: vid=%s, pid=%s", default_vid, default_pid);
+                    mFilterKdev = MKDEV(major, minor);
+                } else {
+                    mFilterKdev = -1;
+                }
+            }
+        }
+    }
+
+    // ignore sg or cdrom uevent
+    if ( (major == SG_MAJOR) || (major == CDROM_MAJOR) ) {
+        return;
+    }
+
+    // ignore matched filter sd block uevent 
+    if ( mFilterKdev == MKDEV(major, minor) ) {
+        SLOGI("Ignore 3g dongle sdx block event: major=%d, minor=%d", major, minor);
+        return;
+    }
+
     for (it = mVolumes->begin(); it != mVolumes->end(); ++it) {
         if (!(*it)->handleBlockEvent(evt)) {
 #ifdef NETLINK_DEBUG
diff --git a/VolumeManager.h b/VolumeManager.h
index 334b81b..5135149 100644
--- a/VolumeManager.h
+++ b/VolumeManager.h
@@ -25,6 +25,9 @@
 
 #include "Volume.h"
 
+/* The max num of 3g dongle support */
+#define MAX_U3G_NUM   1024
+
 /* The length of an MD5 hash when encoded into ASCII hex characters */
 #define MD5_ASCII_LENGTH_PLUS_NULL ((MD5_DIGEST_LENGTH*2)+1)
 
@@ -76,6 +79,11 @@ private:
     int                    mVolManagerDisabled;
     int                    mNextLunNumber;
 
+    // filter dev for 3g dongle sda block event
+    dev_t               mFilterKdev;
+    int                 mFilterCount;
+    int                 mFilterVidPid[MAX_U3G_NUM];
+
 public:
     virtual ~VolumeManager();
 
@@ -149,6 +157,9 @@ public:
     int getDirectVolumeList(struct volume_info *vol_list);
     int unmountAllAsecsInDir(const char *directory);
 
+    int addFilterDevice(int vid, int pid);
+    bool isFilterDevice(int vid, int pid);
+
 private:
     VolumeManager();
     void readInitialState();
diff --git a/main.cpp b/main.cpp
index afbfa41..7c1726d 100644
--- a/main.cpp
+++ b/main.cpp
@@ -275,6 +275,22 @@ static int process_config(VolumeManager *vm) {
     }
 
     fclose(fp);
+
+    if (!(fp = fopen("/etc/usb_modeswitch.d/u3glist.txt", "r"))) {
+        // try to open file in system directory
+        if (!(fp = fopen("/system/etc/usb_modeswitch.d/u3glist.txt", "r"))) {
+            return -1;
+        }
+    }
+
+    while(fgets(line, sizeof(line), fp)) {
+        int vid, pid;
+        if (sscanf(line, "%x_%x", &vid, &pid) == 2) {
+            vm->addFilterDevice(vid, pid);
+        }
+    }
+    fclose(fp);
+
     return 0;
 
 out_syntax:
-- 
1.8.1.5

